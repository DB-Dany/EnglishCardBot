import os
import random
import sys
import traceback
from contextlib import contextmanager
from typing import Optional, Dict, List, Tuple

from dotenv import load_dotenv
import telebot
from telebot import types
import psycopg2

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = telebot.TeleBot(os.getenv("TELEGRAM_BOT_TOKEN"))

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}


# –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
@contextmanager
def db_connection():
    conn = None
    try:
        conn = psycopg2.connect(
            dbname=os.getenv("DB_NAME"),
            user=os.getenv("DB_USER"),
            password=os.getenv("DB_PASSWORD"),
            host=os.getenv("DB_HOST"),
            port=os.getenv("DB_PORT")
        )
        yield conn
    except psycopg2.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        raise
    finally:
        if conn:
            conn.close()


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –µ–≥–æ ID
def get_or_create_user(user: types.User) -> Optional[int]:
    try:
        with db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    INSERT INTO users (telegram_id, username, first_name)
                    VALUES (%s, %s, %s)
                    ON CONFLICT (telegram_id) 
                    DO UPDATE SET username = EXCLUDED.username, first_name = EXCLUDED.first_name
                    RETURNING id
                """, (user.id, user.username, user.first_name))
                user_id = cur.fetchone()[0]
                conn.commit()
                return user_id
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ get_or_create_user: {e}")
        return None


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_words_count(user_id: int) -> int:
    try:
        with db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT COUNT(*) FROM user_words 
                    WHERE user_id = %s
                """, (user_id,))
                return cur.fetchone()[0]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ get_user_words_count: {e}")
        return 0


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ)
def get_random_word_with_options(user_id: int, previous_word: str = None) -> Optional[Dict]:
    try:
        with db_connection() as conn:
            with conn.cursor() as cur:
                word_data = None
                word_type = None
                attempts = 0
                max_attempts = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞–π—Ç–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ

                while attempts < max_attempts:
                    attempts += 1

                    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–ª–æ–≤–æ (50% chance)
                    if random.random() > 0.5:
                        if previous_word:
                            cur.execute("""
                                SELECT word, translation FROM user_words 
                                WHERE user_id = %s AND word != %s
                                ORDER BY RANDOM() 
                                LIMIT 1
                            """, (user_id, previous_word))
                        else:
                            cur.execute("""
                                SELECT word, translation FROM user_words 
                                WHERE user_id = %s 
                                ORDER BY RANDOM() 
                                LIMIT 1
                            """, (user_id,))
                        word_data = cur.fetchone()
                        word_type = 'user'

                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–ª–æ–≤–æ, –±–µ—Ä–µ–º –∏–∑ –±–∞–∑—ã
                    if not word_data:
                        if previous_word:
                            cur.execute("""
                                SELECT word, translation FROM base_words 
                                WHERE word != %s
                                ORDER BY RANDOM() 
                                LIMIT 1
                            """, (previous_word,))
                        else:
                            cur.execute("""
                                SELECT word, translation FROM base_words 
                                ORDER BY RANDOM() 
                                LIMIT 1
                            """)
                        word_data = cur.fetchone()
                        word_type = 'base'

                    if not word_data:
                        continue  # –ï—Å–ª–∏ —Å–ª–æ–≤–∞ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑

                    word, translation = word_data

                    # –ü–æ–ª—É—á–∞–µ–º 3 —Å–ª—É—á–∞–π–Ω—ã—Ö –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
                    cur.execute("""
                        SELECT translation FROM base_words 
                        WHERE translation != %s 
                        ORDER BY RANDOM() 
                        LIMIT 3
                    """, (translation,))
                    other_words = [row[0] for row in cur.fetchall()]

                    return {
                        'word': word,
                        'translation': translation,
                        'other_words': other_words,
                        'type': word_type
                    }

                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫
                return None

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ get_random_word_with_options: {e}")
        return None


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞
def add_user_word(user_id: int, word: str, translation: str) -> bool:
    try:
        with db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    INSERT INTO user_words (user_id, word, translation)
                    VALUES (%s, %s, %s)
                    ON CONFLICT (user_id, word) 
                    DO UPDATE SET translation = EXCLUDED.translation
                """, (user_id, word.strip(), translation.strip()))
                conn.commit()
                return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ add_user_word: {e}")
        return False


# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞
def delete_user_word(user_id: int, word: str) -> bool:
    try:
        with db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    DELETE FROM user_words 
                    WHERE user_id = %s AND word = %s
                    RETURNING id
                """, (user_id, word.strip()))
                deleted = cur.fetchone() is not None
                conn.commit()
                return deleted
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ delete_user_word: {e}")
        return False


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–ª–æ–≤
def get_user_words(user_id: int) -> List[Tuple[str, str]]:
    try:
        with db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT word, translation FROM user_words 
                    WHERE user_id = %s
                    ORDER BY word
                """, (user_id,))
                return cur.fetchall()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ get_user_words: {e}")
        return []


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
WELCOME_MESSAGE = """
üëã –ü—Ä–∏–≤–µ—Ç! 
–î–∞–≤–∞–π –∑–∞–π–º–µ–º—Å—è –∏–∑—É—á–µ–Ω–∏–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.
–ó–∞–Ω—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Ç–µ–±—è —Ç–µ–º–ø–µ.
–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.
–î–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–Ω–∞—á–∞–ª–∞ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∞ –ø–æ—Ç–æ–º –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥.

üìå –ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å:
- üî§ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∏ –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥.
- üìö –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Å–ª–æ–≤–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —É–∂–µ –¥–æ–±–∞–≤–∏–ª.
- ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚Äî —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø–æ–ø–æ–ª–Ω—è—Ç—å –±–∞–∑—É.
- ‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ ‚Äî —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π.

–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º? üòâ
"""


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
def main_menu() -> types.InlineKeyboardMarkup:
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton('üî§ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É', callback_data='start_quiz'),
        types.InlineKeyboardButton('üìö –ú–æ–∏ —Å–ª–æ–≤–∞', callback_data='my_words'),
        types.InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ', callback_data='add_word'),
        types.InlineKeyboardButton('‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ', callback_data='delete_word')

    )
    return markup


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
def create_card_markup(target_word: str, other_words: List[str]) -> types.InlineKeyboardMarkup:
    buttons = [types.InlineKeyboardButton(word, callback_data=f"answer_{word}")
               for word in [target_word] + other_words]
    random.shuffle(buttons)
    return types.InlineKeyboardMarkup(row_width=2).add(*buttons)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
def confirm_delete_markup(word: str) -> types.InlineKeyboardMarkup:
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_del_{word}"),
        types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
    )
    return markup


# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –≤–æ–ø—Ä–æ—Å–æ–º
def send_card(chat_id: int, word_data: dict, edit_message_id: int = None):
    question = word_data['word']
    translation = word_data['translation']
    other_words = word_data['other_words']

    markup = create_card_markup(translation, other_words)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    user_data[chat_id] = {
        'correct_answer': translation,
        'question': question,
        'other_words': other_words,
        'message_id': None,
        'previous_word': question  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
    if edit_message_id:
        try:
            sent_msg = bot.edit_message_text(
                chat_id=chat_id,
                message_id=edit_message_id,
                text=f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ:\nüá∑üá∫ *{question}*",
                reply_markup=markup,
                parse_mode="Markdown"
            )
            user_data[chat_id]['message_id'] = edit_message_id
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            sent_msg = bot.send_message(
                chat_id,
                f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ:\nüá∑üá∫ *{question}*",
                reply_markup=markup,
                parse_mode="Markdown"
            )
            user_data[chat_id]['message_id'] = sent_msg.message_id
    else:
        sent_msg = bot.send_message(
            chat_id,
            f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ:\nüá∑üá∫ *{question}*",
            reply_markup=markup,
            parse_mode="Markdown"
        )
        user_data[chat_id]['message_id'] = sent_msg.message_id


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=["start", "help"])
def send_welcome(message: types.Message):
    try:
        user_id = get_or_create_user(message.from_user)
        if not user_id:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        bot.send_message(message.chat.id, WELCOME_MESSAGE, reply_markup=main_menu())
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ send_welcome: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ —Ä—É—Å—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
def ask_for_russian_word(chat_id: int):
    msg = bot.send_message(
        chat_id,
        "üìù –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:",
        reply_markup=types.ForceReply()
    )
    bot.register_next_step_handler(msg, process_russian_word)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—Å—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞
def process_russian_word(message: types.Message):
    chat_id = message.chat.id
    russian_word = message.text.strip()

    if not russian_word:
        bot.send_message(chat_id, "‚ùå –°–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu())
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if chat_id not in user_data:
        user_data[chat_id] = {}
    user_data[chat_id]['adding_word'] = russian_word

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
    msg = bot.send_message(
        chat_id,
        f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Å–ª–æ–≤–∞ '{russian_word}':",
        reply_markup=types.ForceReply()
    )
    bot.register_next_step_handler(msg, process_translation)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–ª–æ–≤–∞
def process_translation(message: types.Message):
    chat_id = message.chat.id
    translation = message.text.strip()

    if not translation:
        bot.send_message(chat_id, "‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu())
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ
    russian_word = user_data.get(chat_id, {}).get('adding_word')
    if not russian_word:
        bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu())
        return

    user_id = get_or_create_user(message.from_user)
    if not user_id:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=main_menu())
        return

    if add_user_word(user_id, russian_word, translation):
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        words_count = get_user_words_count(user_id)
        bot.send_message(
            chat_id,
            f"‚úÖ –°–ª–æ–≤–æ '{russian_word}' —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º '{translation}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
            f"üìä –¢–µ–ø–µ—Ä—å –≤—ã –∏–∑—É—á–∞–µ—Ç–µ —Å–ª–æ–≤: {words_count}",
            reply_markup=main_menu()
        )
    else:
        bot.send_message(chat_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ '{russian_word}'", reply_markup=main_menu())

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if chat_id in user_data and 'adding_word' in user_data[chat_id]:
        del user_data[chat_id]['adding_word']


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call: types.CallbackQuery):
    chat_id = call.message.chat.id
    user = call.from_user
    user_id = get_or_create_user(user)

    if not user_id:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    try:
        if call.data == 'start_quiz':
            # –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            previous_word = user_data.get(chat_id, {}).get('previous_word')
            word_data = get_random_word_with_options(user_id, previous_word)

            if not word_data:
                bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.", reply_markup=main_menu())
                return

            send_card(chat_id, word_data)
            bot.answer_callback_query(call.id)
            return

        elif call.data.startswith('answer_'):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            data = user_data.get(chat_id)
            if not data:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                bot.send_message(chat_id, "‚ö†Ô∏è –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.", reply_markup=main_menu())
                return

            correct_answer = data.get('correct_answer')
            question = data.get('question')
            message_id = data.get('message_id')
            other_words = data.get('other_words', [])
            user_answer = call.data[len('answer_'):]

            if not correct_answer or not question:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
                                 reply_markup=main_menu())
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
            if user_answer == correct_answer:
                response = f"‚úÖ –û—Ç–ª–∏—á–Ω–æ!\n{question} -> {correct_answer}"
                bot.answer_callback_query(call.id, "‚úÖ –í–µ—Ä–Ω–æ!")

                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –∫—Ä–æ–º–µ previous_word
                if chat_id in user_data:
                    prev_word = user_data[chat_id].get('previous_word')
                    user_data[chat_id] = {'previous_word': prev_word}

                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                markup = types.InlineKeyboardMarkup()
                markup.add(
                    types.InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ", callback_data="start_quiz"),
                    types.InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                )

                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
                try:
                    if message_id:
                        bot.edit_message_text(
                            response,
                            chat_id=chat_id,
                            message_id=message_id,
                            reply_markup=markup
                        )
                    else:
                        bot.send_message(chat_id, response, reply_markup=markup)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    bot.send_message(chat_id, response, reply_markup=markup)
            else:
                # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—Ç –∂–µ –≤–æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞
                bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ –∂–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
                word_data = {
                    'word': question,
                    'translation': correct_answer,
                    'other_words': other_words
                }

                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–º –∂–µ –≤–æ–ø—Ä–æ—Å–æ–º
                send_card(chat_id, word_data, message_id)
            return

        elif call.data == 'add_word':
            # –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ
            ask_for_russian_word(chat_id)
            return

        elif call.data == 'delete_word':
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ - –ø–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞
            user_words = get_user_words(user_id)
            if not user_words:
                bot.send_message(chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.", reply_markup=main_menu())
                return

            markup = types.InlineKeyboardMarkup(row_width=1)
            for word, _ in user_words:
                markup.add(types.InlineKeyboardButton(word, callback_data=f"ask_del_{word}"))
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
            return

        elif call.data.startswith('ask_del_'):
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            word = call.data[len('ask_del_'):]
            bot.send_message(
                chat_id,
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ '{word}'?",
                reply_markup=confirm_delete_markup(word)
            )
            return

        elif call.data.startswith('confirm_del_'):
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            word = call.data[len('confirm_del_'):]
            if delete_user_word(user_id, word):
                bot.answer_callback_query(call.id, f"‚úÖ –°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ")
                bot.send_message(chat_id, f"‚úÖ –°–ª–æ–≤–æ '{word}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!", reply_markup=main_menu())
            else:
                bot.answer_callback_query(call.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ '{word}'")
                bot.send_message(chat_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ '{word}'", reply_markup=main_menu())
            return

        elif call.data == 'cancel_delete':
            # –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            bot.answer_callback_query(call.id, "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
            return

        elif call.data == 'my_words':
            # –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_words = get_user_words(user_id)

            if not user_words:
                bot.send_message(chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.", reply_markup=main_menu())
                return

            words_count = len(user_words)
            words_list = "\n".join([f"{rus} - {eng}" for rus, eng in user_words])
            bot.send_message(
                chat_id,
                f"üìö –í–∞—à–∏ —Å–ª–æ–≤–∞ ({words_count}):\n{words_list}",
                reply_markup=main_menu()
            )
            return

        elif call.data == 'main_menu':
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
            return

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}\n–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        with db_connection() as conn:
            with conn.cursor() as cur:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü
                for table in ['users', 'base_words', 'user_words']:
                    cur.execute(f"""
                        SELECT EXISTS (
                            SELECT FROM information_schema.tables 
                            WHERE table_name = '{table}'
                        )
                    """)
                    if not cur.fetchone()[0]:
                        raise Exception(f"–¢–∞–±–ª–∏—Ü–∞ '{table}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        print("üôè –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        bot.infinity_polling()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}\n–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        sys.exit(1)